name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Create AWS Credentials file
      run: |
        mkdir -p .aws
        echo "
        [default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        " > .aws/credentials
    # - name: Test AWS Credentials file creation
    #   run: |
    #     cat $GITHUB_WORKSPACE/.aws/credentials
    - name: Create AWS Config file
      run: |
        mkdir -p .aws
        echo '
        [default]
        region = ap-southeast-2
        
        ' > .aws/config
    # - name: Test AWS Config file creation
    #   run: |
    #     cat $GITHUB_WORKSPACE/.aws/config
    # - name: Get pwd
    #   run: |
    #     pwd
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Set image tag
      run: echo "IMAGE_TAG=$(date +"%Y%m%d_%H%M%S" -u)-${{ github.sha }}" >> $GITHUB_ENV
    # - name: Get image tag
    #   run: echo "IMAGE_TAG is " $IMAGE_TAG
    - name: Build Envoy and tag image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: aws-costs-envoy-sidecar
      run: |
        docker build \
          --file Dockerfile-envoy \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    - name: Build and tag image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: adrian-ubalde
      run: |
        docker build \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    - name: Start application
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: adrian-ubalde
      run: |
        docker run \
          -d -p 8080:80 \
          -v $GITHUB_WORKSPACE/.aws:/tmp/.aws:ro \
          --name todoapi $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker exec todoapi cat /root/.aws/credentials
    - name: Integration test
      shell: bash
      run: ./integration-tests.sh
    - name: Push image to AWS ECR
      if: github.event_name == 'push' # i.e. Push to master
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: adrian-ubalde
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Push Envoy image to AWS ECR
      if: github.event_name == 'push' # i.e. Push to master
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: aws-costs-envoy-sidecar
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
    - name: Deploy to AWS CloudFormation
      if: github.event_name == 'push' # i.e. Push to master
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: AwsCosts
        template: cloudformation.yaml
        parameter-overrides: >-
          ContainerImageUri=${{ steps.login-ecr.outputs.registry }}/adrian-ubalde:${{ env.IMAGE_TAG }},
          EnvoyContainerImageUri=${{ steps.login-ecr.outputs.registry }}/aws-costs-envoy-sidecar:${{ env.IMAGE_TAG }}
        no-fail-on-empty-changeset: "1" # 1=true
        timeout-in-minutes: 10
