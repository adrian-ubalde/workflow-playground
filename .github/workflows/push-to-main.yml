name: .NET Core

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Set image tag
      run: echo "::set-env name=IMAGE_TAG::$(date +"%Y%m%d_%H%M%S" -u)-${{ github.sha }}"
    # - name: Get image tag
    #   run: echo "IMAGE_TAG is " $IMAGE_TAG
    - name: Build and tag image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: adrian-ubalde
      run: |
        docker build \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    - name: Start application
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: adrian-ubalde
      run: |
        docker run \
          -d -p 8080:80 --name todoapi $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Integration test
      shell: bash
      run: ./integration-tests.sh
    - name: Push image to AWS ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: adrian-ubalde
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
    - name: Deploy to AWS CloudFormation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: AwsCosts2
        template: cloudformation.yaml
        parameter-overrides: "ContainerImageUri=${{ steps.login-ecr.outputs.registry }}/adrian-ubalde:${{ env.IMAGE_TAG }}"
        no-fail-on-empty-changeset: "1" # 1=true
        timeout-in-minutes: 10
